{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "import itertools\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_csv(\"dataset_mood_smartphone.csv\",index_col=0)# Importing df\n",
    "df = df.loc[df.variable==\"mood\",:] # Filtering df\n",
    "df = df[[\"id\",\"time\",\"value\"]] # Selecting columns\n",
    "\n",
    "ids = df[\"id\"].unique() # Unique Id values\n",
    "\n",
    "df.set_index('time', inplace=True) # Setting time as the index.\n",
    "df.index = pd.to_datetime(df.index)# Converting index to date-time index\n",
    "\n",
    "groups = df.groupby('id').apply(lambda df1: df1.resample(\"D\").mean()) #Grouping by id, than taking avg mood of each day\n",
    "groups.fillna(method=\"bfill\",inplace=True) # Backward filling; Fill the missing values with the most recent previous value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AS14.01   8.013501110925263 \n",
      "\n",
      "AS14.02   9.00813955329985 \n",
      "\n",
      "AS14.03   7.623533194891941 \n",
      "\n",
      "AS14.05   6.264273549642175 \n",
      "\n",
      "AS14.06   6.962428125014615 \n",
      "\n",
      "AS14.07   5.303607930832795 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\base\\model.py:508: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
      "  \"Check mle_retvals\", ConvergenceWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "AS14.08   6.642275398619994 \n",
      "\n",
      "AS14.09   5.9439702891927375 \n",
      "\n",
      "AS14.12   5.979163037744676 \n",
      "\n",
      "AS14.13   7.943476546422116 \n",
      "\n",
      "AS14.14   6.9674774032159785 \n",
      "\n",
      "AS14.15   6.995902986304931 \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AS14.16   7.2836495853613465 \n",
      "\n",
      "AS14.17   7.49343048615426 \n",
      "\n",
      "AS14.19   7.009434530574423 \n",
      "\n",
      "AS14.20   6.983162689808762 \n",
      "\n",
      "AS14.23   9.044328568890093 \n",
      "\n",
      "AS14.24   6.443535194613725 \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AS14.25   6.925797115563132 \n",
      "\n",
      "AS14.26   6.343883550292394 \n",
      "\n",
      "AS14.27   6.952160008416185 \n",
      "\n",
      "AS14.28   6.450700292396273 \n",
      "\n",
      "AS14.29   5.933575682145666 \n",
      "\n",
      "AS14.30   8.008896423853493 \n",
      "\n",
      "AS14.31   6.992518951500127 \n",
      "\n",
      "AS14.32   7.147441738010805 \n",
      "\n",
      "AS14.33   6.9130826660107125 \n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n",
      "C:\\Users\\yamaç\\Anaconda3\\lib\\site-packages\\statsmodels\\tsa\\base\\tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n",
      "  % freq, ValueWarning)\n"
     ]
    }
   ],
   "source": [
    "predictions = []\n",
    "dates = []\n",
    "\n",
    "\n",
    "# looping through id\n",
    "for idx,i in enumerate(ids):    \n",
    "\n",
    "    mod = sm.tsa.statespace.SARIMAX(groups.loc[i],\n",
    "                                enforce_stationarity=False,\n",
    "                                enforce_invertibility=False)\n",
    "    \n",
    "    results = mod.fit()\n",
    "    \n",
    "    #Predicting the day after each individuals last recorded day\n",
    "    pred = results.get_prediction(start=(pd.to_datetime(groups.loc[i].index[-1])+datetime.timedelta(days=1)), dynamic=False)\n",
    "    \n",
    "    predictions.append((pred.predicted_mean)[0])\n",
    "    dates.append(pd.to_datetime(groups.loc[i].index[-1])+datetime.timedelta(days=1))\n",
    "    print(i,\" \" ,predictions[idx],\"\\n\")\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Ids</th>\n",
       "      <th>Dates</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AS14.01</td>\n",
       "      <td>2014-05-05</td>\n",
       "      <td>8.013501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AS14.02</td>\n",
       "      <td>2014-04-26</td>\n",
       "      <td>9.008140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AS14.03</td>\n",
       "      <td>2014-05-08</td>\n",
       "      <td>7.623533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AS14.05</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>6.264274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AS14.06</td>\n",
       "      <td>2014-05-09</td>\n",
       "      <td>6.962428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AS14.07</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>5.303608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AS14.08</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>6.642275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AS14.09</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>5.943970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AS14.12</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>5.979163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AS14.13</td>\n",
       "      <td>2014-05-05</td>\n",
       "      <td>7.943477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AS14.14</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>6.967477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AS14.15</td>\n",
       "      <td>2014-05-09</td>\n",
       "      <td>6.995903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AS14.16</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>7.283650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AS14.17</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>7.493430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>AS14.19</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>7.009435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>AS14.20</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>6.983163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>AS14.23</td>\n",
       "      <td>2014-05-01</td>\n",
       "      <td>9.044329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>AS14.24</td>\n",
       "      <td>2014-06-09</td>\n",
       "      <td>6.443535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>AS14.25</td>\n",
       "      <td>2014-05-09</td>\n",
       "      <td>6.925797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>AS14.26</td>\n",
       "      <td>2014-05-31</td>\n",
       "      <td>6.343884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>AS14.27</td>\n",
       "      <td>2014-05-16</td>\n",
       "      <td>6.952160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>AS14.28</td>\n",
       "      <td>2014-05-09</td>\n",
       "      <td>6.450700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>AS14.29</td>\n",
       "      <td>2014-05-16</td>\n",
       "      <td>5.933576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>AS14.30</td>\n",
       "      <td>2014-05-06</td>\n",
       "      <td>8.008896</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>AS14.31</td>\n",
       "      <td>2014-05-16</td>\n",
       "      <td>6.992519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>AS14.32</td>\n",
       "      <td>2014-05-13</td>\n",
       "      <td>7.147442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>AS14.33</td>\n",
       "      <td>2014-06-01</td>\n",
       "      <td>6.913083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Ids      Dates  predictions\n",
       "0   AS14.01 2014-05-05     8.013501\n",
       "1   AS14.02 2014-04-26     9.008140\n",
       "2   AS14.03 2014-05-08     7.623533\n",
       "3   AS14.05 2014-05-06     6.264274\n",
       "4   AS14.06 2014-05-09     6.962428\n",
       "5   AS14.07 2014-05-06     5.303608\n",
       "6   AS14.08 2014-05-06     6.642275\n",
       "7   AS14.09 2014-05-06     5.943970\n",
       "8   AS14.12 2014-05-06     5.979163\n",
       "9   AS14.13 2014-05-05     7.943477\n",
       "10  AS14.14 2014-05-06     6.967477\n",
       "11  AS14.15 2014-05-09     6.995903\n",
       "12  AS14.16 2014-05-06     7.283650\n",
       "13  AS14.17 2014-05-06     7.493430\n",
       "14  AS14.19 2014-05-06     7.009435\n",
       "15  AS14.20 2014-05-06     6.983163\n",
       "16  AS14.23 2014-05-01     9.044329\n",
       "17  AS14.24 2014-06-09     6.443535\n",
       "18  AS14.25 2014-05-09     6.925797\n",
       "19  AS14.26 2014-05-31     6.343884\n",
       "20  AS14.27 2014-05-16     6.952160\n",
       "21  AS14.28 2014-05-09     6.450700\n",
       "22  AS14.29 2014-05-16     5.933576\n",
       "23  AS14.30 2014-05-06     8.008896\n",
       "24  AS14.31 2014-05-16     6.992519\n",
       "25  AS14.32 2014-05-13     7.147442\n",
       "26  AS14.33 2014-06-01     6.913083"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction_vals = pd.DataFrame(\n",
    "    {'Ids': ids,'Dates': dates[:27],'predictions': predictions[:27]\n",
    "     })\n",
    "prediction_vals"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
